{"version":3,"file":"static/js/107.bc51ef73.chunk.js","mappings":"oSAqEA,UAxDc,WACZ,IAAMA,GAAWC,EAAAA,EAAAA,MACTC,GAAUC,EAAAA,EAAAA,MAAVD,MACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAY,mCAAG,WACnBC,EADmB,qFAEjBC,EAFiB,EAEjBA,cAFiB,kBAKMC,EAAAA,GAAAA,KAAS,aAAcF,GAL7B,gBAKTG,EALS,EAKTA,MACRC,EAAAA,EAAAA,IAAS,OAACD,QAAD,IAACA,OAAD,EAACA,EAAME,cAChBb,GAASc,EAAAA,EAAAA,GAAwBZ,GAAkB,CAAEa,SAAS,IAP7C,kDASbC,IAAAA,aAAA,OAA6B,KAAMC,UACrCX,EAAgB,KAAMW,SAASN,KAAKO,SAVrB,yBAajBT,GAAc,GAbG,6EAAH,wDAiBlB,OACE,iCACE,SAAC,IAAD,WACE,wDAEF,SAAC,IAAD,CACEU,UAAWd,EACXe,cAAeC,EAAAA,GACfC,iBAAkBC,EAAAA,GAClBhB,aAAcA,EACdiB,MAAM,eACNC,SAAS,UACTC,YACE,8DAEE,SAAC,IAAD,CAASC,UAAWC,EAAAA,GAAMC,GAAG,YAAY3B,MAAOA,EAAhD,8BAVN,SAgBG4B,OAAOC,KAAKV,EAAAA,IAAaW,KAAI,SAACC,GAAD,OAC5B,SAAC,IAAD,CAEEC,KAAMD,EACNE,aAAa,UACbC,OAAOC,EAAAA,EAAAA,IAAmBJ,IAHrBA","sources":["pages/Login.tsx"],"sourcesContent":["import Helmet from \"react-helmet\";\nimport axios from \"axios\";\nimport MuiLink from \"@mui/material/Link\";\nimport { FormikHelpers } from \"formik\";\nimport { useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { API, loginSchema, loginValues, TLoginValues } from \"../lib\";\nimport { camelToCapitalized } from \"../utils\";\nimport { saveToken } from \"../utils/store-token\";\nimport CustomInput from \"../components/CustomInput\";\nimport FormLayout from \"../components/FormLayout\";\nimport { getRedirectUrlFromState, TState } from \"../utils/get-url\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSubmit = async (\n    values: Partial<TLoginValues>,\n    { setSubmitting }: FormikHelpers<Partial<TLoginValues>>\n  ) => {\n    try {\n      const { data } = await API.post(\"auth/login\", values);\n      saveToken(data?.refreshToken);\n      navigate(getRedirectUrlFromState(state as TState), { replace: true });\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        setErrorMessage(error.response.data.message);\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Login to your Account</title>\n      </Helmet>\n      <FormLayout\n        authError={errorMessage}\n        initialValues={loginValues}\n        validationSchema={loginSchema}\n        handleSubmit={handleSubmit}\n        title=\"Welcome back\"\n        formType=\"sign-in\"\n        formFooter={\n          <>\n            Don&apos;t have an account?&nbsp;\n            <MuiLink component={Link} to=\"/register\" state={state}>\n              Register here\n            </MuiLink>\n          </>\n        }\n      >\n        {Object.keys(loginValues).map((field) => (\n          <CustomInput\n            key={field}\n            name={field}\n            passwordType=\"current\"\n            label={camelToCapitalized(field)}\n          />\n        ))}\n      </FormLayout>\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["navigate","useNavigate","state","useLocation","useState","errorMessage","setErrorMessage","handleSubmit","values","setSubmitting","API","data","saveToken","refreshToken","getRedirectUrlFromState","replace","axios","response","message","authError","initialValues","loginValues","validationSchema","loginSchema","title","formType","formFooter","component","Link","to","Object","keys","map","field","name","passwordType","label","camelToCapitalized"],"sourceRoot":""}