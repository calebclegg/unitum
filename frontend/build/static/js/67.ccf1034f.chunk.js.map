{"version":3,"file":"static/js/67.ccf1034f.chunk.js","mappings":"yRAyEA,UA7DiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACTC,GAAUC,EAAAA,EAAAA,MAAVD,MACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAY,mCAAG,WACnBC,EADmB,iFAEjBC,EAFiB,EAEjBA,cAFiB,kBAKXC,EAAAA,GAAAA,KAAS,gBAAiBF,GALf,OAMjBR,EAAS,SAAU,CACjBE,MAAO,CACLS,UAAW,eACXC,MAAMC,EAAAA,EAAAA,KACNC,SAAQ,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAkBU,QAVhB,gDAcbG,IAAAA,aAAA,OAA6B,KAAMC,UACrCV,EAAgB,KAAMU,SAASC,KAAKC,SAfrB,yBAkBjBT,GAAc,GAlBG,4EAAH,wDAsBlB,OACE,iCACE,SAAC,IAAD,WACE,oDAEF,SAAC,IAAD,CACEF,aAAcA,EACdY,UAAWd,EACXe,cAAeC,EAAAA,GACfC,iBAAkBC,EAAAA,GAClBC,MAAM,oBACNC,SAAS,UACTC,YACE,yDAEE,SAAC,IAAD,CAASC,UAAWC,EAAAA,GAAMC,GAAG,SAAS3B,MAAOA,EAA7C,2BAVN,SAgBG4B,OAAOC,KAAKV,EAAAA,IAAgBW,KAAI,SAACC,GAAD,OAC/B,SAAC,IAAD,CAEEC,KAAMD,EACNE,aAAa,MACbC,OAAOC,EAAAA,EAAAA,IAAmBJ,IAHrBA","sources":["pages/Register.tsx"],"sourcesContent":["import Helmet from \"react-helmet\";\nimport axios from \"axios\";\nimport MuiLink from \"@mui/material/Link\";\nimport { useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { FormikHelpers } from \"formik\";\nimport { API, registerSchema, registerValues, TRegisterValues } from \"../lib\";\nimport { camelToCapitalized } from \"../utils\";\nimport { getUrl, TState } from \"../utils/get-url\";\nimport CustomInput from \"../components/CustomInput\";\nimport FormLayout from \"../components/FormLayout\";\n\nconst Register = () => {\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSubmit = async (\n    values: Partial<TRegisterValues>,\n    { setSubmitting }: FormikHelpers<Partial<TRegisterValues>>\n  ) => {\n    try {\n      await API.post(\"auth/register\", values);\n      navigate(\"/login\", {\n        state: {\n          condition: \"auth-success\",\n          from: getUrl(),\n          existing: (state as TState)?.from\n        }\n      });\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        setErrorMessage(error.response.data.message);\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Create an Account</title>\n      </Helmet>\n      <FormLayout\n        handleSubmit={handleSubmit}\n        authError={errorMessage}\n        initialValues={registerValues}\n        validationSchema={registerSchema}\n        title=\"Create an account\"\n        formType=\"sign-up\"\n        formFooter={\n          <>\n            Already a member?&nbsp;\n            <MuiLink component={Link} to=\"/login\" state={state}>\n              Login here\n            </MuiLink>\n          </>\n        }\n      >\n        {Object.keys(registerValues).map((field) => (\n          <CustomInput\n            key={field}\n            name={field}\n            passwordType=\"new\"\n            label={camelToCapitalized(field)}\n          />\n        ))}\n      </FormLayout>\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["navigate","useNavigate","state","useLocation","useState","errorMessage","setErrorMessage","handleSubmit","values","setSubmitting","API","condition","from","getUrl","existing","axios","response","data","message","authError","initialValues","registerValues","validationSchema","registerSchema","title","formType","formFooter","component","Link","to","Object","keys","map","field","name","passwordType","label","camelToCapitalized"],"sourceRoot":""}